@page "/jobs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using JobSearchAssistant.Shared
@using BlazorPro.Spinkit
@attribute [Authorize]
@inject HttpClient Http
@inject JobSearchAssistant.Client.Services.IJobService JobService
@inject AuthenticationStateProvider authprovider
@inject NavigationManager navigationManager


<h3>Jobs</h3>
<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <Circle Center="true" Size="60px" />
    </LoadingTemplate>
    <ContentTemplate>


        @if (jobs.Count == 0)
        {
            <p><em>No jobs to show.</em></p>
        }

        <table class="table">
            <thead>
                <tr>
                    <th>Company</th>
                    <th>Status</th>
                    <th>Position</th>
                    <th>Date Applied</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in jobs)
                {
                    if (job.IsEditing)
                    {
                <tr>
                    <td data-label="Company Name">
                        <input type="text" class="form-control" placeholder="Company Name" @bind="job.CompanyName" />
                    </td>
                    <td data-label="Status">
                        <input type="text" class="form-control" placeholder="Status" @bind="job.Status" />
                    </td>
                    <td data-label="Position">
                        <input type="text" class="form-control" placeholder="Position" @bind="job.Position" />
                    </td>
                    <td data-label="Date Applied">
                        <input type="date" class="form-control" placeholder="Date Applied" @bind="job.AppliedDate" />
                    </td>
                    <td>
                        <button type="button" class="oi oi-check" @onclick="() => UpdateJob(job)"></button>
                    </td>
                    <td>
                        <button type="button" class="oi oi-x" @onclick="() => EnableEditing(false, job)"></button>
                    </td>
                </tr>
                    }
                    else
                    {
                        <tr>
                            <td data-label="Company Name">@job.CompanyName</td>
                            <td data-label="Status">@job.Status</td>
                            <td data-label="Position">@job.Position</td>
                            <td data-label="Date Applied">@job.AppliedDate.Date.ToString("yyyy-MM-dd")</td>
                            <td>
                                <button type="button" class="oi oi-pencil" @onclick="() => EnableEditing(true, job)"></button>
                            </td>
                            <td>
                                <button class="oi oi-trash" @onclick="() => DeleteJob(job.Id)"></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </ContentTemplate>
</SpinLoader>

<button @onclick="CreateNewJob">Create new Job</button>

@if (createNewJob)
{
    <EditForm Model="@newJob" OnValidSubmit="InsertJobData">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="company-name">Company Name</label>
            <br />
            <InputText id="company-name" @bind-Value="newJob.CompanyName" class="form-control" />
            <ValidationMessage For="@(() => newJob.CompanyName)" />
        </div>
        <div class="form-group">
            <label for="status">Status</label>
            <br />
            <InputText id="status" @bind-Value="newJob.Status" class="form-control" />
        </div>
        <div class="form-group">
            <label for="position">Position</label>
            <br />
            <InputText id="position" @bind-Value="newJob.Position" class="form-control" />
        </div>
        <div class="form-group">
            <label for="applied-date">Date Applied</label>
            <br />
            <InputDate id="applied-date" @bind-Value="newJob.AppliedDate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
}


@code {
    public bool IsLoading = true;
    bool isEditing;
    bool createNewJob = false;
    Job newJob = new Job();
    private List<Job> jobs = new List<Job>();
    private string currentUserId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authprovider.GetAuthenticationStateAsync();
        var claims = authState.User.Claims.ToList();
        currentUserId = claims[2].Value;
        newJob.UserId = currentUserId;
        newJob.AppliedDate = DateTime.Today;
        jobs = await JobService.GetJobsByUserId(currentUserId);
        IsLoading = false;
    }
    public async Task Refresh()
    {
        IsLoading = true;
        jobs = await JobService.GetJobsByUserId(currentUserId);
        IsLoading = false;
    }
    private void EnableEditing(bool flag, Job job)
    {
        job.IsEditing = flag;
    }
    public async void UpdateJob(Job job)
    {
        EnableEditing(false, job);
        await Http.PutAsJsonAsync<Job>($"api/Job/{job.Id}", job);
        navigationManager.NavigateTo("/jobs");
    }
    public void CreateNewJob()
    {
        if (createNewJob != true)
            createNewJob = true;
        else
            createNewJob = false;
    }
    public async Task InsertJobData()
    {
        newJob.UserId = currentUserId;
        var result = await JobService.CreateNewJob(newJob);
        if (result != null)
        {
            newJob = new Job();
            newJob.AppliedDate = DateTime.Today;
            createNewJob = false;
            await Refresh();
        }
    }

    public async Task DeleteJob(int id)
    {
        try
        {
            await JobService.DeleteJobById(id);
            await Refresh();
        }
        catch (Exception ex)
        {

            throw;
        }
    }
}



